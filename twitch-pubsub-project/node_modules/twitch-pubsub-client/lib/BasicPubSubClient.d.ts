import { EventEmitter, Listener } from '@d-fischer/typed-event-emitter';
import { PubSubMessageData } from './Messages/PubSubMessage';
import { LogLevel } from '@d-fischer/logger';
/**
 * A client for the Twitch PubSub interface.
 */
export default class BasicPubSubClient extends EventEmitter {
    private _socket?;
    private readonly _logger;
    private readonly _topics;
    private _connecting;
    private _connected;
    private _manualDisconnect;
    private _initialConnect;
    private _pingCheckTimer?;
    private _pingTimeoutTimer?;
    private _retryTimer?;
    private _retryDelayGenerator?;
    private readonly _onPong;
    private readonly _onResponse;
    /**
     * Fires when a message that matches your listening topics is received.
     *
     * @eventListener
     * @param topic The name of the topic.
     * @param message The message data.
     */
    readonly onMessage: (handler: (topic: string, message: PubSubMessageData) => void) => Listener;
    /**
     * Fires when the client finishes establishing a connection to the PubSub server.
     *
     * @eventListener
     */
    readonly onConnect: (handler: () => void) => Listener;
    /**
     * Fires when the client closes its connection to the PubSub server.
     *
     * @eventListener
     * @param isError Whether the cause of the disconnection was an error. A reconnect will be attempted if this is true.
     */
    readonly onDisconnect: (handler: (isError: boolean) => void) => Listener;
    /**
     * Fires when the client receives a pong message from the PubSub server.
     *
     * @eventListener
     * @param latency The current latency to the server, in milliseconds.
     * @param requestTimestampe The time the ping request was sent to the PubSub server.
     */
    readonly onPong: (handler: (latency: number, requestTimestamp: number) => void) => Listener;
    /**
     * Creates a new PubSub client.
     *
     * @param logLevel The level of logging to use for the PubSub client.
     */
    constructor(logLevel?: LogLevel);
    /**
     * Listens to one or more topics.
     *
     * @param topics A topic or a list of topics to listen to.
     * @param accessToken An access token. Only necessary for some topics.
     */
    listen(topics: string | string[], accessToken?: string): Promise<void>;
    /**
     * Removes one or more topics from the listener.
     *
     * @param topics A topic or a list of topics to not listen to anymore.
     */
    unlisten(topics: string | string[]): Promise<void>;
    /**
     * Connects to the PubSub interface.
     */
    connect(): Promise<void>;
    /**
     * Disconnects from the PubSub interface.
     */
    disconnect(): void;
    /**
     * Reconnects to the PubSub interface.
     */
    reconnect(): Promise<void>;
    private _sendListen;
    private _sendUnlisten;
    private _resendListens;
    private _sendNonced;
    private _receiveMessage;
    private _sendPacket;
    private _pingCheck;
    /**
     * Checks whether the client is currently connecting to the server.
     */
    protected readonly isConnecting: boolean;
    /**
     * Checks whether the client is currently connected to the server.
     */
    protected readonly isConnected: boolean;
    private _startPingCheckTimer;
    private static _getReconnectWaitTime;
}
