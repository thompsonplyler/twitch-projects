import TwitchClient, { UserIdResolvable } from 'twitch';
import SingleUserPubSubClient from './SingleUserPubSubClient';
import PubSubBitsMessage from './Messages/PubSubBitsMessage';
import PubSubBitsBadgeUnlockMessage from './Messages/PubSubBitsBadgeUnlockMessage';
import PubSubChatModActionMessage from './Messages/PubSubChatModActionMessage';
import PubSubSubscriptionMessage from './Messages/PubSubSubscriptionMessage';
import PubSubWhisperMessage from './Messages/PubSubWhisperMessage';
export default class PubSubClient {
    private readonly _rootClient;
    private readonly _userClients;
    registerUserListener(twitchClient: TwitchClient, user?: UserIdResolvable): Promise<void>;
    getUserListener(user: UserIdResolvable): SingleUserPubSubClient;
    onBits(user: UserIdResolvable, callback: (message: PubSubBitsMessage) => void): Promise<import("./PubSubListener").default<PubSubBitsMessage>>;
    onBitsBadgeUnlock(user: UserIdResolvable, callback: (message: PubSubBitsBadgeUnlockMessage) => void): Promise<import("./PubSubListener").default<PubSubBitsBadgeUnlockMessage>>;
    onSubscription(user: UserIdResolvable, callback: (message: PubSubSubscriptionMessage) => void): Promise<import("./PubSubListener").default<PubSubSubscriptionMessage>>;
    onWhisper(user: UserIdResolvable, callback: (message: PubSubWhisperMessage) => void): Promise<import("./PubSubListener").default<PubSubWhisperMessage>>;
    onModAction(user: UserIdResolvable, channel: UserIdResolvable, callback: (message: PubSubChatModActionMessage) => void): Promise<import("./PubSubListener").default<PubSubChatModActionMessage>>;
}
