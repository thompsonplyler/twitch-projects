import TwitchClient, { UserIdResolvable } from 'twitch';
import BasicPubSubClient from './BasicPubSubClient';
import PubSubListener from './PubSubListener';
import PubSubBitsMessage from './Messages/PubSubBitsMessage';
import PubSubBitsBadgeUnlockMessage from './Messages/PubSubBitsBadgeUnlockMessage';
import PubSubChatModActionMessage from './Messages/PubSubChatModActionMessage';
import PubSubSubscriptionMessage from './Messages/PubSubSubscriptionMessage';
import PubSubWhisperMessage from './Messages/PubSubWhisperMessage';
import { LogLevel } from '@d-fischer/logger';
/**
 * Options for creating the single-user PubSub client.
 */
interface SingleUserPubSubClientOptions {
    /**
     * The {@TwitchClient} instance to use for API requests and token management.
     */
    twitchClient: TwitchClient;
    /**
     * The underlying {@BasicPubSubClient} instance. If not given, we'll create a new one.
     */
    pubSubClient?: BasicPubSubClient;
    /**
     * The level of logging to use for the PubSub client.
     */
    logLevel?: LogLevel;
}
/**
 * A higher level PubSub client attached to a single user.
 */
export default class SingleUserPubSubClient {
    private readonly _twitchClient;
    private readonly _pubSubClient;
    private readonly _listeners;
    /**
     * Creates a new Twitch PubSub client.
     *
     * @expandParams
     */
    constructor({ twitchClient, pubSubClient, logLevel }: SingleUserPubSubClientOptions);
    /**
     * Adds a listener to bits events to the client.
     *
     * @param callback A function to be called when a bits event happens in the user's channel.
     *
     * It receives a {@PubSubBitsMessage} object.
     */
    onBits(callback: (message: PubSubBitsMessage) => void): Promise<PubSubListener<PubSubBitsMessage>>;
    /**
     * Adds a listener to bits badge unlock events to the client.
     *
     * @param callback A function to be called when a bits event happens in the user's channel.
     *
     * It receives a {@PubSubBitsBadgeUnlockMessage} object.
     */
    onBitsBadgeUnlock(callback: (message: PubSubBitsBadgeUnlockMessage) => void): Promise<PubSubListener<PubSubBitsBadgeUnlockMessage>>;
    /**
     * Adds a listener to subscription events to the client.
     *
     * @param callback A function to be called when a subscription event happens in the user's channel.
     *
     * It receives a {@PubSubSubscriptionMessage} object.
     */
    onSubscription(callback: (message: PubSubSubscriptionMessage) => void): Promise<PubSubListener<PubSubSubscriptionMessage>>;
    /**
     * Adds a listener to whisper events to the client.
     *
     * @param callback A function to be called when a whisper event is sent to the user.
     *
     * It receives a {@PubSubWhisperMessage} object.
     */
    onWhisper(callback: (message: PubSubWhisperMessage) => void): Promise<PubSubListener<PubSubWhisperMessage>>;
    /**
     * Adds a listener to mod action events to the client.
     *
     * @param channelId The ID of the channel to listen to.
     * @param callback A function to be called when a mod action event is sent to the user.
     *
     * It receives a {@PubSubChatModActionMessage} object.
     */
    onModAction(channelId: UserIdResolvable, callback: (message: PubSubChatModActionMessage) => void): Promise<PubSubListener<PubSubChatModActionMessage>>;
    /**
     * Removes a listener from the client.
     *
     * @param listener A listener returned by one of the `add*Listener` methods.
     */
    removeListener(listener: PubSubListener): void;
    private _getUserData;
    private _addListener;
}
export {};
