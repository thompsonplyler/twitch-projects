import { PubSubBasicMessageInfo } from './PubSubMessage';
import TwitchClient from 'twitch';
import { MakeOptional } from '../Toolkit/Types';
export interface PubSubBitsMessageBadgeEntitlement {
    previous_version: number;
    new_version: number;
}
export interface PubSubBitsMessageContent extends MakeOptional<PubSubBasicMessageInfo, 'channel_id' | 'channel_name' | 'user_id' | 'user_name'> {
    chat_message: string;
    bits_used: number;
    total_bits_used: number;
    context: 'cheer';
    badge_entitlement: PubSubBitsMessageBadgeEntitlement | null;
    is_anonymous: boolean;
}
export interface PubSubBitsMessageData {
    data: PubSubBitsMessageContent;
    version: string;
    message_type: string;
    message_id: string;
}
/**
 * A message that informs about bits being used in a channel.
 */
export default class PubSubBitsMessage {
    private readonly _data;
    private readonly _twitchClient;
    /** @private */
    constructor(_data: PubSubBitsMessageData, twitchClient: TwitchClient);
    /**
     * The ID of the user that sent the bits.
     */
    readonly userId: string | undefined;
    /**
     * The name of the user that sent the bits.
     */
    readonly userName: string | undefined;
    /**
     * Retrieves more data about the user.
     */
    getUser(): Promise<import("twitch").HelixUser | null>;
    /**
     * The full message that was sent with the bits.
     */
    readonly message: string;
    /**
     * The number of bits that were sent.
     */
    readonly bits: number;
    /**
     * The total number of bits that were ever sent by the user in the channel.
     */
    readonly totalBits: number;
    /**
     * Whether the cheer was anonymous.
     */
    readonly isAnonymous: boolean;
}
