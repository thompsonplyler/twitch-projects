"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Decorators_1 = require("../Toolkit/Decorators");
/**
 * A message that informs about a user subscribing to a channel.
 */
var PubSubSubscriptionMessage = /** @class */ (function () {
    /** @private */
    function PubSubSubscriptionMessage(_data, twitchClient) {
        this._data = _data;
        this._twitchClient = twitchClient;
    }
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "userId", {
        /**
         * The ID of the user subscribing to the channel.
         */
        get: function () {
            return this._data.context === 'subgift' || this._data.context === 'anonsubgift'
                ? this._data.recipient_id
                : this._data.user_id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "userName", {
        /**
         * The name of the user subscribing to the channel.
         */
        get: function () {
            return this._data.context === 'subgift' || this._data.context === 'anonsubgift'
                ? this._data.recipient_user_name
                : this._data.user_name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "userDisplayName", {
        /**
         * The display name of the user subscribing to the channel.
         */
        get: function () {
            return this._data.context === 'subgift' || this._data.context === 'anonsubgift'
                ? this._data.recipient_display_name
                : this._data.display_name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "streakMonths", {
        /**
         * The streak amount of months the user has been subscribed for.
         *
         * Returns 0 if a gift sub or the streaks months.
         */
        get: function () {
            return this._data.context === 'subgift' || this._data.context === 'anonsubgift'
                ? 0
                : this._data['streak-months'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "cumulativeMonths", {
        /**
         * The cumulative amount of months the user has been subscribed for.
         *
         * Returns the months if a gift sub or the cumulative months.
         */
        get: function () {
            return this._data.context === 'subgift' || this._data.context === 'anonsubgift'
                ? this._data.months
                : this._data['cumulative-months'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "months", {
        /**
         * The cumulative amount of months the user has been subscribed for.
         *
         * Returns the months if a gift sub or the cumulative months.
         */
        get: function () {
            return this.cumulativeMonths;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "time", {
        /**
         * The time the user subscribed.
         */
        get: function () {
            return new Date(this._data.time);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "message", {
        /**
         * The message sent with the subscription.
         *
         * Returns null if the subscription is a gift subscription.
         */
        get: function () {
            return this._data.context === 'subgift' || this._data.context === 'anonsubgift' ? null : this._data.sub_message;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "subPlan", {
        /**
         * The plan of the subscription.
         */
        get: function () {
            return this._data.sub_plan;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "isResub", {
        /**
         * Whether the subscription is a resub.
         */
        get: function () {
            return this._data.context === 'resub';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "isGift", {
        /**
         * Whether the subscription is a gift.
         */
        get: function () {
            return this._data.context === 'subgift';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "isAnonymous", {
        /**
         * Whether the subscription is from an anonymous gifter.
         */
        get: function () {
            return this._data.context === 'anonsubgift';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "gifterId", {
        /**
         * The ID of the user gifting the subscription.
         *
         * Returns null if the subscription is not a gift.
         */
        get: function () {
            return this.isGift ? this._data.user_id : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "gifterName", {
        /**
         * The name of the user gifting the subscription.
         *
         * Returns null if the subscription is not a gift.
         */
        get: function () {
            return this.isGift ? this._data.user_name : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PubSubSubscriptionMessage.prototype, "gifterDisplayName", {
        /**
         * The display name of the user gifting the subscription.
         *
         * Returns null if the subscription is not a gift.
         */
        get: function () {
            return this.isGift ? this._data.display_name : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Retrieves more data about the subscribing user.
     */
    PubSubSubscriptionMessage.prototype.getUser = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._twitchClient.helix.users.getUserById(this.userId)];
            });
        });
    };
    /**
     * Retrieves more data about the gifting user.
     *
     * Throws if the subscription is not a gift.
     */
    PubSubSubscriptionMessage.prototype.getGifter = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (!this.isGift) {
                    throw new TypeError("Trying to get the gifter of a subscription that's not a gift");
                }
                return [2 /*return*/, this._twitchClient.helix.users.getUserById(this.gifterId)];
            });
        });
    };
    tslib_1.__decorate([
        Decorators_1.NonEnumerable
    ], PubSubSubscriptionMessage.prototype, "_twitchClient", void 0);
    return PubSubSubscriptionMessage;
}());
exports.default = PubSubSubscriptionMessage;
//# sourceMappingURL=PubSubSubscriptionMessage.js.map