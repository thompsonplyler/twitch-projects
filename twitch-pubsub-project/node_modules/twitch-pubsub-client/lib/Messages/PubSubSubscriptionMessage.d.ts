import { PubSubBasicMessageInfo, PubSubChatMessage } from './PubSubMessage';
import TwitchClient from 'twitch';
export interface PubSubSubscriptionDetail {
    context: 'sub' | 'resub';
    'cumulative-months': number;
    'streak-months': number;
}
export interface PubSubSubscriptionGiftDetail {
    context: 'subgift' | 'anonsubgift';
    recipient_id: string;
    recipient_user_name: string;
    recipient_display_name: string;
    months: number;
}
export declare type PubSubSubscriptionMessageData = PubSubBasicMessageInfo & {
    display_name: string;
    sub_plan: 'Prime' | '1000' | '2000' | '3000';
    sub_plan_name: string;
    sub_message: PubSubChatMessage;
} & (PubSubSubscriptionDetail | PubSubSubscriptionGiftDetail);
/**
 * A message that informs about a user subscribing to a channel.
 */
export default class PubSubSubscriptionMessage {
    private readonly _data;
    private readonly _twitchClient;
    /** @private */
    constructor(_data: PubSubSubscriptionMessageData, twitchClient: TwitchClient);
    /**
     * The ID of the user subscribing to the channel.
     */
    readonly userId: string;
    /**
     * The name of the user subscribing to the channel.
     */
    readonly userName: string;
    /**
     * The display name of the user subscribing to the channel.
     */
    readonly userDisplayName: string;
    /**
     * The streak amount of months the user has been subscribed for.
     *
     * Returns 0 if a gift sub or the streaks months.
     */
    readonly streakMonths: any;
    /**
     * The cumulative amount of months the user has been subscribed for.
     *
     * Returns the months if a gift sub or the cumulative months.
     */
    readonly cumulativeMonths: any;
    /**
     * The cumulative amount of months the user has been subscribed for.
     *
     * Returns the months if a gift sub or the cumulative months.
     */
    readonly months: any;
    /**
     * The time the user subscribed.
     */
    readonly time: Date;
    /**
     * The message sent with the subscription.
     *
     * Returns null if the subscription is a gift subscription.
     */
    readonly message: PubSubChatMessage | null;
    /**
     * The plan of the subscription.
     */
    readonly subPlan: "Prime" | "1000" | "2000" | "3000";
    /**
     * Whether the subscription is a resub.
     */
    readonly isResub: boolean;
    /**
     * Whether the subscription is a gift.
     */
    readonly isGift: boolean;
    /**
     * Whether the subscription is from an anonymous gifter.
     */
    readonly isAnonymous: boolean;
    /**
     * The ID of the user gifting the subscription.
     *
     * Returns null if the subscription is not a gift.
     */
    readonly gifterId: string | null;
    /**
     * The name of the user gifting the subscription.
     *
     * Returns null if the subscription is not a gift.
     */
    readonly gifterName: string | null;
    /**
     * The display name of the user gifting the subscription.
     *
     * Returns null if the subscription is not a gift.
     */
    readonly gifterDisplayName: string | null;
    /**
     * Retrieves more data about the subscribing user.
     */
    getUser(): Promise<import("twitch").HelixUser | null>;
    /**
     * Retrieves more data about the gifting user.
     *
     * Throws if the subscription is not a gift.
     */
    getGifter(): Promise<import("twitch").HelixUser | null>;
}
