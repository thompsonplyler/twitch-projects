"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _a, _b, _c;
var LogLevel_1 = require("./LogLevel");
var chalk_1 = require("chalk");
var BaseLogger_1 = require("./BaseLogger");
exports.LogLevelToEmoji = (_a = {},
    _a[LogLevel_1.default.CRITICAL] = "\uD83D\uDED1",
    _a[LogLevel_1.default.ERROR] = "\u274C",
    // these following two need extra spaces at the end because somehow they consume less space in a terminal than they should...
    _a[LogLevel_1.default.WARNING] = "\u26A0\uFE0F ",
    _a[LogLevel_1.default.INFO] = "\u2139\uFE0F ",
    _a[LogLevel_1.default.DEBUG1] = "\uD83D\uDC1E",
    _a[LogLevel_1.default.DEBUG2] = "\uD83D\uDC1C",
    _a[LogLevel_1.default.DEBUG3] = "\uD83D\uDC1B",
    _a[LogLevel_1.default.TRACE] = "\uD83D\uDC3E",
    _a);
exports.LogLevelToColor = (_b = {},
    _b[LogLevel_1.default.CRITICAL] = chalk_1.default.red,
    _b[LogLevel_1.default.ERROR] = chalk_1.default.redBright,
    _b[LogLevel_1.default.WARNING] = chalk_1.default.yellow,
    _b[LogLevel_1.default.INFO] = chalk_1.default.blue,
    _b[LogLevel_1.default.DEBUG1] = chalk_1.default.magenta,
    _b[LogLevel_1.default.DEBUG2] = chalk_1.default.magenta,
    _b[LogLevel_1.default.DEBUG3] = chalk_1.default.magenta,
    _b[LogLevel_1.default.TRACE] = chalk_1.default.reset,
    _b);
exports.LogLevelToBackgroundColor = (_c = {},
    _c[LogLevel_1.default.CRITICAL] = chalk_1.default.bgRed.white,
    _c[LogLevel_1.default.ERROR] = chalk_1.default.bgRedBright.white,
    _c[LogLevel_1.default.WARNING] = chalk_1.default.bgYellow.black,
    _c[LogLevel_1.default.INFO] = chalk_1.default.bgBlue.white,
    _c[LogLevel_1.default.DEBUG1] = chalk_1.default.bgMagenta.black,
    _c[LogLevel_1.default.DEBUG2] = chalk_1.default.bgMagenta.black,
    _c[LogLevel_1.default.DEBUG3] = chalk_1.default.bgMagenta.black,
    _c[LogLevel_1.default.TRACE] = chalk_1.default.inverse,
    _c);
var NodeLogger = /** @class */ (function (_super) {
    tslib_1.__extends(NodeLogger, _super);
    function NodeLogger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeLogger.prototype.log = function (level, message) {
        if (level > this._minLevel) {
            return;
        }
        var logFn = LogLevel_1.LogLevelToConsoleFunction[level];
        var builtMessage = '';
        if (this._timestamps) {
            builtMessage += "[" + new Date().toLocaleTimeString() + "] ";
        }
        if (this._emoji) {
            var emoji = exports.LogLevelToEmoji[level];
            builtMessage += emoji + " ";
        }
        if (this._colors) {
            builtMessage += exports.LogLevelToBackgroundColor[level](this._name) + " " + exports.LogLevelToBackgroundColor[level](LogLevel_1.default[level]) + " " + exports.LogLevelToColor[level](message);
        }
        else {
            builtMessage += "[" + this._name + ":" + LogLevel_1.default[level].toLowerCase() + "] " + message;
        }
        logFn(builtMessage);
    };
    return NodeLogger;
}(BaseLogger_1.default));
exports.default = NodeLogger;
//# sourceMappingURL=NodeLogger.js.map